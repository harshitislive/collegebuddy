generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Role {
  GUEST
  STUDENT
  ADMIN
  SUPERADMIN
}

enum ReferralType {
  GUEST     // Registered with my referral code
  PENDING   // Clicked / showed interest
  SUCCESS   // Purchased a course
  REJECTED
}

enum EarningType {
  REFERRAL
  COURSE
  GIG
}

enum NoteCategory {
  UNIT
  PYQ
  LIVE
  EBOOKS
  OTHERS
}

enum PayoutStatus {
  PENDING
  SUCCESS
  REJECTED
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String                @unique
  password    String
  phoneNo     String?               @unique
  role        Role                  @default(GUEST)
  createdAt   DateTime              @default(now())
  isVerified  Boolean               @default(false)

  referralCode String?              @unique @default(uuid())
  referredBy   String?              @db.ObjectId

  // Relations
  courses        CourseEnrollment[]
  tokens         VerificationToken[]

  // Referrals
  referralsMade  ReferralTransaction[] @relation("ReferrerRelation")
  referralsGot   ReferralTransaction[] @relation("RefereeRelation")

  // Earnings & payouts
  earnings       Earning[]
  payouts        PaymentPayout[]
  upi            UserUPI?

  // GigAssignments
  gigAssignments GigAssignment[]
}

model CourseEnrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   User     @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId

  // Payment relation
  payment   Payment? @relation("EnrollmentPayment")
  paymentId String?  @db.ObjectId

  joinedAt  DateTime @default(now())
}

model Payment {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  enrollment   CourseEnrollment @relation("EnrollmentPayment", fields: [enrollmentId], references: [id])
  enrollmentId String           @db.ObjectId @unique
  status       PaymentStatus    @default(PENDING)
  transactionId String?
}

model Course {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  code        String?
  subjects    Subject[]
  enrollments CourseEnrollment[]
  price       Int                @default(0)
  discount    Int                @default(0)
  referralComission Int          @default(0)
  createdAt   DateTime           @default(now())
}

model Subject {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  course      Course        @relation(fields: [courseId], references: [id])
  courseId    String        @db.ObjectId
  sessions    LiveSession[]
  lectures    Lecture[]
  notes       Note[]
  assignments Assignment[]
}

model LiveSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  date      DateTime
  meetLink  String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String   @db.ObjectId
  liveNotes String?
}

model Lecture {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId
}

model Note {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  fileUrl   String
  subject   Subject      @relation(fields: [subjectId], references: [id])
  subjectId String       @db.ObjectId
  category  NoteCategory @default(UNIT)
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String    @db.ObjectId
}

enum ReferralStatus {
  PENDING    // waiting for admin approval
  APPROVED   // approved but not paid yet
  REJECTED   // rejected with reason
  CREDITED   // credited into earnings
}

model ReferralTransaction {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId

  // Referrer (who earns)
  referrer   User            @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referrerId String          @db.ObjectId

  // Referee (new user/student/lead)
  referee    User?           @relation("RefereeRelation", fields: [refereeId], references: [id])
  refereeId  String?         @db.ObjectId

  type       ReferralType
  status     ReferralStatus  @default(PENDING)
  amount     Int?            // fixed for guest, % of course for student
  message    String?         // rejection note

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}


model Earning {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  amount    Int
  source    EarningType
  createdAt DateTime    @default(now())
}

model UserUPI {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId  @unique 
  upiId     String
  upiName   String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentPayout {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  amount      Int
  status      PayoutStatus @default(PENDING)
  message     String?
  createdAt   DateTime     @default(now())
  processedAt DateTime?
}

model Gig {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  url         String?   // optional link (like Google Form, external task page, etc.)
  reward      Int       // earnings for completing
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation to assignments
  assignments GigAssignment[]
}

model GigAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  gig       Gig      @relation(fields: [gigId], references: [id])
  gigId     String   @db.ObjectId
  student   User     @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  status    GigStatus @default(PENDING)
  submittedAt DateTime?
  reviewedAt  DateTime?
}

enum GigStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}
